location ~ .*\.php {
  root $root;

  # Regex to split $uri to $fastcgi_script_name and $fastcgi_path_info
  fastcgi_split_path_info ^(.+\.php)\?(/.+)$;

  # Check that the PHP script exists before passing it
  try_files $fastcgi_script_name =404;

  # Bypass the fact that try_files resets $fastcgi_path_info
  # see: http://trac.nginx.org/nginx/ticket/321
  set $path_info $fastcgi_path_info;
  fastcgi_param PATH_INFO $path_info;

  include /etc/nginx/fastcgi.conf;
  fastcgi_pass fpmpool;
}

location /static/ {
  # No statics for bots either; this mostly prevents
  # bots from getting help, but may have other effects,
  # can be revisited.
  if ($http_accord_author_type = "bot") { return 404; }
  if ($http_accord_user_type = "bot") { return 404; }

  root $root;
}

# Help is pre-generated and not context-dependent
location ~ ^/command/help$ { return 302 /static/help.txt; }
location ~ ^/command/help/(\w+)$ { return 302 /static/help/$1.txt; }
location ~ ^/command/(\w+)/help$ { return 302 /static/help/$1.txt; }

location /command/ {
  set is_bot 0;
  # That prevents us calling ourselves, but also other
  # bots calling us, which may or may not be desirable
  if ($http_accord_author_type = "bot") { set is_bot 1; }
  if ($http_accord_user_type = "bot") { set is_bot 1; }

  # Special handling for pluralkit
  if ($http_accord_author_id = "676603550469718025") { set is_bot 0; }
  # (each user with autoproxying must be blocked below)
  if ($http_account_author_id = "182887606340550656") { set is_bot 1; }

  if ($bot = 1) { return 404; }

  # Static files existing wouldn't be picked up anyway
  # as the method won't be a GET, so rewrite outright
  rewrite . /app/index.php last;
}

location ~ ^/server/\d+/join/\d+$ {
	# Don't interact with bots joining the server
	if ($http_accord_author_type = "bot") { return 404; }
	if ($http_accord_user_type = "bot") { return 404; }

	rewrite . /app/index.php last;
}

# Sets the presence. Because this only happens on Accord
# boot, it's much rarer now than it was prior. Will need
# to figure out how to set presence at runtime... # TODO
location = /discord/connecting {
  rewrite . /app/index.php last;
}

# Send all 2-byte messages to a check in case they're
# the "double-bang" shorthand command
location ~ ^/server/\d+/channel/\d+/message$ {
	if ($http_accord_content_length = "2") {
		return 307 /check/double-bang;
	}
}

# Internal redirect target
location /check/ {
	rewrite . /app/index.php last;
}

# For efficiency, to avoid nginx looking for a file
# if it's not explicitely handled above
location / {
  return 404;
}
